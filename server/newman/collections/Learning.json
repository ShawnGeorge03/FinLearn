{
	"info": {
		"_postman_id": "fcd6a167-f310-4f52-8dc1-897aebf4fe22",
		"name": "Learning",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "28563069",
		"_collection_link": "https://www.postman.com/cscc01-finlearn/workspace/finlearn/collection/28563069-fcd6a167-f310-4f52-8dc1-897aebf4fe22?action=share&creator=28563069&source=collection_link"
	},
	"item": [
		{
			"name": "Courses",
			"item": [
				{
					"name": "All Courses",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Verify Status Code is 200', function() {\r",
									"\tpm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test(\"Verify Fields\", function () {\r",
									"\tconst schema = {\r",
									"\t\t\"type\": \"array\",\r",
									"\t\t\"items\": [\r",
									"\t\t\t{\r",
									"\t\t\t\t\"type\": \"object\",\r",
									"\t\t\t\t\"properties\": {\r",
									"\t\t\t\t\t\"name\": { \r",
									"\t\t\t\t\t\t\"type\": \"string\" \r",
									"\t\t\t\t\t},\r",
									"\t\t\t\t\t\"slug\": { \r",
									"\t\t\t\t\t\t\"type\": \"string\",\r",
									"\t\t\t\t\t\t\"pattern\": \"^[a-z0-9-]+$\"\r",
									"\t\t\t\t\t},\r",
									"\t\t\t\t\t\"icon\": { \r",
									"\t\t\t\t\t\t\"type\": \"string\"\r",
									"\t\t\t\t\t}\r",
									"\t\t\t\t},\r",
									"\t\t\t\t\"required\": [ \"name\", \"slug\", \"icon\"]\r",
									"\t\t\t}\r",
									"\t\t],\t\t\r",
									"\t}\r",
									"\tpm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Data\", function () {\r",
									"\tconst expected = [\r",
									"        {\r",
									"            \"name\": \"Money 101\",\r",
									"            \"slug\": \"money-101\",\r",
									"            \"icon\": \"https://cdn-icons-png.flaticon.com/512/4305/4305512.png\"\r",
									"        },\r",
									"        {\r",
									"            \"name\": \"Finance 101\",\r",
									"            \"slug\": \"finance-101\",\r",
									"            \"icon\": \"https://cdn-icons-png.flaticon.com/512/4305/4305512.png\"\r",
									"        }\r",
									"    ]\r",
									"\tconst actual = pm.response.json();\r",
									"\r",
									"\tpm.expect(actual).to.be.eql(expected);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/courses",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"courses"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Units",
			"item": [
				{
					"name": "Missing Query Param",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Verify Status Code is 400', function() {\r",
									"\tpm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Verify Fields\", function () {\r",
									"\tconst schema = {\r",
									"\t\t\"type\": \"object\",\r",
									"  \t\t\t\"properties\": {\r",
									"    \t\t\t\"type\": { \"type\": \"string\" },\r",
									"\t\t\t\t\"message\": { \"type\": \"string\" }\r",
									"  \t\t\t},\r",
									"\t\t\t  \"required\": [ \"type\", \"message\" ]\r",
									"\t}\r",
									"\t\r",
									"\tpm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Verify Error Type\", function () {\r",
									"\tpm.expect(jsonData.type).is.to.equal(\"MissingQueryParams\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Error Message\", function () {\r",
									"\tpm.expect(jsonData.message).is.to.equal(\r",
									"\t\t\"The request params requires courseSlug\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/units",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"units"
							]
						}
					},
					"response": []
				},
				{
					"name": "Blank courseSlug",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Verify Status Code is 400', function() {\r",
									"\tpm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"var jsonData = pm.response.json(); \r",
									"\r",
									"pm.test(\"Verify Fields\", function () {\r",
									"\tconst schema = {\r",
									"\t\t\"type\": \"object\",\r",
									"  \t\t\t\"properties\": {\r",
									"    \t\t\t\"type\": { \"type\": \"string\" },\r",
									"\t\t\t\t\"message\": { \"type\": \"string\" }\r",
									"  \t\t\t},\r",
									"\t\t\t  \"required\": [ \"type\", \"message\" ]\r",
									"\t}\r",
									"\t\r",
									"\tpm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Error Type\", function () {\r",
									"\tpm.expect(jsonData.type).is.to.equal(\"MissingSlug\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Error Message\", function () {\r",
									"\tpm.expect(jsonData.message).is.to.equal(\r",
									"\t\t\"courseSlug must be an alphanumeric string with \\\"-\\\" for spaces\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/units?courseSlug=",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"units"
							],
							"query": [
								{
									"key": "courseSlug",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid courseSlug",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Verify Status Code is 400', function() {\r",
									"\tpm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"var jsonData = pm.response.json(); \r",
									"\r",
									"pm.test(\"Verify Fields\", function () {\r",
									"\tconst schema = {\r",
									"\t\t\"type\": \"object\",\r",
									"  \t\t\t\"properties\": {\r",
									"    \t\t\t\"type\": { \"type\": \"string\" },\r",
									"\t\t\t\t\"message\": { \"type\": \"string\" }\r",
									"  \t\t\t},\r",
									"\t\t\t  \"required\": [ \"type\", \"message\" ]\r",
									"\t}\r",
									"\t\r",
									"\tpm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Error Type\", function () {\r",
									"\tpm.expect(jsonData.type).is.to.equal(\"InvalidSlug\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Error Message\", function () {\r",
									"\tpm.expect(jsonData.message).is.to.equal(\r",
									"\t\t\"courseSlug must be an alphanumeric string with \\\"-\\\" for spaces\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/units?courseSlug=(test1)",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"units"
							],
							"query": [
								{
									"key": "courseSlug",
									"value": "(test1)"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Valid courseSlug",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Verify Status Code is 200', function() {\r",
									"\tpm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test(\"Verify Fields\", function () {\r",
									"\tconst schema = {\r",
									"\t\ttype: \"object\",\r",
									"\t\tproperties: {\r",
									"\t\t\tname: { type: \"string\" },\r",
									"\t\t\tunits: {\r",
									"\t\t\ttype: \"array\",\r",
									"\t\t\titems: [\r",
									"\t\t\t\t{\r",
									"\t\t\t\ttype: \"object\",\r",
									"\t\t\t\tproperties: {\r",
									"\t\t\t\t\tname: { type: \"string\" },\r",
									"\t\t\t\t\tslug: { type: \"string\" },\r",
									"\t\t\t\t\tcontents: {\r",
									"\t\t\t\t\ttype: \"array\",\r",
									"\t\t\t\t\titems: [\r",
									"\t\t\t\t\t\t{\r",
									"\t\t\t\t\t\ttype: \"object\",\r",
									"\t\t\t\t\t\tproperties: {\r",
									"\t\t\t\t\t\t\tslug: { type: \"string\" },\r",
									"\t\t\t\t\t\t\tcontentType: { type: \"string\" },\r",
									"\t\t\t\t\t\t\tname: { type: \"string\" },\r",
									"\t\t\t\t\t\t},\r",
									"\t\t\t\t\t\trequired: [\"slug\", \"contentType\", \"name\"],\r",
									"\t\t\t\t\t\t},\r",
									"\t\t\t\t\t],\r",
									"\t\t\t\t\t},\r",
									"\t\t\t\t},\r",
									"\t\t\t\trequired: [\"name\", \"slug\", \"contents\"],\r",
									"\t\t\t\t},\r",
									"\t\t\t],\r",
									"\t\t\t},\r",
									"\t\t},\r",
									"\t\trequired: [\"name\", \"units\"],\r",
									"\t\t};\r",
									"\r",
									"\r",
									"\r",
									"\tpm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Data\", function () {\r",
									"\tconst expected = {\r",
									"        \"name\": \"Finance 101\",\r",
									"        \"units\": [\r",
									"            {\r",
									"                \"name\": \"S&P 500 Investments\",\r",
									"                \"slug\": \"S&P-500-Investments\",\r",
									"                \"contents\": [\r",
									"                    {\r",
									"                        \"slug\": \"money-video\",\r",
									"                        \"contentType\": \"video\",\r",
									"                        \"name\": \"Everything You Need to Know About Finance and Investing\"\r",
									"                    }\r",
									"                ]\r",
									"            }\r",
									"        ]\r",
									"    }\r",
									"\tconst actual = pm.response.json();\r",
									"\r",
									"\tpm.expect(actual).to.be.eql(expected);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/units?courseSlug=finance-101",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"units"
							],
							"query": [
								{
									"key": "courseSlug",
									"value": "finance-101"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Nonexistent Course",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Verify Status Code is 404', function() {\r",
									"\tpm.response.to.have.status(404);\r",
									"})\r",
									"\r",
									"var jsonData = pm.response.json(); \r",
									"\r",
									"pm.test(\"Verify Fields\", function () {\r",
									"\tconst schema = {\r",
									"\t\t\"type\": \"object\",\r",
									"  \t\t\t\"properties\": {\r",
									"    \t\t\t\"type\": { \"type\": \"string\" },\r",
									"\t\t\t\t\"message\": { \"type\": \"string\" }\r",
									"  \t\t\t},\r",
									"\t\t\t  \"required\": [ \"type\", \"message\" ]\r",
									"\t}\r",
									"\t\r",
									"\tpm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Error Type\", function () {\r",
									"\tpm.expect(jsonData.type).is.to.equal(\"CourseDoesNotExist\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Error Message\", function () {\r",
									"\tpm.expect(jsonData.message).is.to.equal(\r",
									"\t\t\"Failed to find Course with slug: test-0001\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/units?courseSlug=test-0001",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"units"
							],
							"query": [
								{
									"key": "courseSlug",
									"value": "test-0001"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Article",
			"item": [
				{
					"name": "Missing Query Param",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Verify Status Code is 400', function() {\r",
									"\tpm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"var jsonData = pm.response.json(); \r",
									"\r",
									"pm.test(\"Verify Fields\", function () {\r",
									"\tconst schema = {\r",
									"\t\t\"type\": \"object\",\r",
									"  \t\t\t\"properties\": {\r",
									"    \t\t\t\"type\": { \"type\": \"string\" },\r",
									"\t\t\t\t\"message\": { \"type\": \"string\" }\r",
									"  \t\t\t},\r",
									"\t\t\t  \"required\": [ \"type\", \"message\" ]\r",
									"\t}\r",
									"\t\r",
									"\tpm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Error Type\", function () {\r",
									"\tpm.expect(jsonData.type).is.to.equal(\"MissingQueryParams\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Error Message\", function () {\r",
									"\tpm.expect(jsonData.message).is.to.equal(\r",
									"\t\t\"The request params requires articleSlug\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/article",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"article"
							]
						}
					},
					"response": []
				},
				{
					"name": "Blank articleSlug",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Verify Status Code is 400', function() {\r",
									"\tpm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"var jsonData = pm.response.json(); \r",
									"\r",
									"pm.test(\"Verify Fields\", function () {\r",
									"\tconst schema = {\r",
									"\t\t\"type\": \"object\",\r",
									"  \t\t\t\"properties\": {\r",
									"    \t\t\t\"type\": { \"type\": \"string\" },\r",
									"\t\t\t\t\"message\": { \"type\": \"string\" }\r",
									"  \t\t\t},\r",
									"\t\t\t  \"required\": [ \"type\", \"message\" ]\r",
									"\t}\r",
									"\t\r",
									"\tpm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Error Type\", function () {\r",
									"\tpm.expect(jsonData.type).is.to.equal(\"MissingSlug\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Error Message\", function () {\r",
									"\tpm.expect(jsonData.message).is.to.equal(\r",
									"\t\t\"articleSlug must be an alphanumeric string with \\\"-\\\" for spaces\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/article?articleSlug=",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"article"
							],
							"query": [
								{
									"key": "articleSlug",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid articleSlug",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Verify Status Code is 400', function() {\r",
									"\tpm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"var jsonData = pm.response.json(); \r",
									"\r",
									"pm.test(\"Verify Fields\", function () {\r",
									"\tconst schema = {\r",
									"\t\t\"type\": \"object\",\r",
									"  \t\t\t\"properties\": {\r",
									"    \t\t\t\"type\": { \"type\": \"string\" },\r",
									"\t\t\t\t\"message\": { \"type\": \"string\" }\r",
									"  \t\t\t},\r",
									"\t\t\t  \"required\": [ \"type\", \"message\" ]\r",
									"\t}\r",
									"\t\r",
									"\tpm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Error Type\", function () {\r",
									"\tpm.expect(jsonData.type).is.to.equal(\"InvalidSlug\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Error Message\", function () {\r",
									"\tpm.expect(jsonData.message).is.to.equal(\r",
									"\t\t\"articleSlug must be an alphanumeric string with \\\"-\\\" for spaces\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/article?articleSlug=(test1)",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"article"
							],
							"query": [
								{
									"key": "articleSlug",
									"value": "(test1)"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Valid articleSlug",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Verify Status Code is 200', function() {\r",
									"\tpm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Verify Fields\", function () {\r",
									"\tconst schema = {\r",
									"\t\t\"type\": \"object\",\r",
									"\t\t\"properties\": {\r",
									"\t\t\t\"name\": { \"type\": \"string\" },\r",
									"\t\t\t\"slug\": { \"type\": \"string\" },\r",
									"\t\t\t\"createdAt\": { \"type\": \"string\" },\r",
									"    \t\t\"updatedAt\": { \"type\": \"string\" },\r",
									"\t\t\t\"image\": { \"type\": \"string\" }, \r",
									"\t\t\t\"author\": { \"type\": \"string\" },\r",
									"\t\t\t\"contentType\": { \"type\": \"string\" },\r",
									"\t\t\t\"articleText\": { \"type\": \"string\" },\r",
									"  \t\t},\r",
									"  \t\t\"required\": [\"name\", \"slug\", \"createdAt\", \"updatedAt\", \"image\", \"author\", \"contentType\", \"articleText\"]\r",
									"\t}\r",
									"\r",
									"\tpm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Data\", function () {\r",
									"\tconst expected = {\r",
									"    \"slug\": \"pyramid-schemes\",\r",
									"    \"createdAt\": \"2023-06-08T22:08:18.818Z\",\r",
									"    \"updatedAt\": \"2023-06-08T22:08:18.818Z\",\r",
									"    \"image\": \"https://cdn.pixabay.com/photo/2017/09/07/08/54/money-2724241_1280.jpg\",\r",
									"    \"author\": \"Rahul Sharma\",\r",
									"    \"contentType\": \"article\",\r",
									"    \"articleText\": \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec\\ncondimentum quam arcu, eu tempus tortor molestie at. Vestibulum\\npretium condimentum dignissim. Vestibulum ultrices vitae nisi sed\\nimperdiet. Mauris quis erat consequat, commodo massa quis, feugiat\\nsapien. Suspendisse placerat vulputate posuere. Curabitur neque\\ntortor, mattis nec lacus non, placerat congue elit.\",\r",
									"    \"name\": \"Pyramid Schemes\"\r",
									"}\r",
									"\r",
									"\tconst actual = pm.response.json();\r",
									"\r",
									"\tpm.expect(actual).to.be.eql(expected);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/article?articleSlug=pyramid-schemes",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"article"
							],
							"query": [
								{
									"key": "articleSlug",
									"value": "pyramid-schemes"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Nonexistent Article",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Verify Status Code is 404', function() {\r",
									"\tpm.response.to.have.status(404);\r",
									"})\r",
									"\r",
									"var jsonData = pm.response.json(); \r",
									"\r",
									"pm.test(\"Verify Fields\", function () {\r",
									"\tconst schema = {\r",
									"\t\t\"type\": \"object\",\r",
									"  \t\t\t\"properties\": {\r",
									"    \t\t\t\"type\": { \"type\": \"string\" },\r",
									"\t\t\t\t\"message\": { \"type\": \"string\" }\r",
									"  \t\t\t},\r",
									"\t\t\t  \"required\": [ \"type\", \"message\" ]\r",
									"\t}\r",
									"\t\r",
									"\tpm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Verify Error Type\", function () {\r",
									"\tpm.expect(jsonData.type).is.to.equal(\"ArticleDoesNotExist\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Error Message\", function () {\r",
									"\tpm.expect(jsonData.message).is.to.equal(\r",
									"\t\t\"Failed to find Article with slug: test-0001\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/article?articleSlug=test-0001",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"article"
							],
							"query": [
								{
									"key": "articleSlug",
									"value": "test-0001"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Video",
			"item": [
				{
					"name": "Missing Query Param",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Verify Status Code is 400', function() {\r",
									"\tpm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"var jsonData = pm.response.json(); \r",
									"\r",
									"pm.test(\"Verify Fields\", function () {\r",
									"\tconst schema = {\r",
									"\t\t\"type\": \"object\",\r",
									"  \t\t\t\"properties\": {\r",
									"    \t\t\t\"type\": { \"type\": \"string\" },\r",
									"\t\t\t\t\"message\": { \"type\": \"string\" }\r",
									"  \t\t\t},\r",
									"\t\t\t  \"required\": [ \"type\", \"message\" ]\r",
									"\t}\r",
									"\t\r",
									"\tpm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Error Type\", function () {\r",
									"\tpm.expect(jsonData.type).is.to.equal(\"MissingQueryParams\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Error Message\", function () {\r",
									"\tpm.expect(jsonData.message).is.to.equal(\r",
									"\t\t\"The request params requires videoSlug\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/video",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"video"
							]
						}
					},
					"response": []
				},
				{
					"name": "Blank videoSlug",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Verify Status Code is 400', function() {\r",
									"\tpm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"var jsonData = pm.response.json(); \r",
									"\r",
									"pm.test(\"Verify Fields\", function () {\r",
									"\tconst schema = {\r",
									"\t\t\"type\": \"object\",\r",
									"  \t\t\t\"properties\": {\r",
									"    \t\t\t\"type\": { \"type\": \"string\" },\r",
									"\t\t\t\t\"message\": { \"type\": \"string\" }\r",
									"  \t\t\t},\r",
									"\t\t\t  \"required\": [ \"type\", \"message\" ]\r",
									"\t}\r",
									"\t\r",
									"\tpm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Error Type\", function () {\r",
									"\tpm.expect(jsonData.type).is.to.equal(\"MissingSlug\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Error Message\", function () {\r",
									"\tpm.expect(jsonData.message).is.to.equal(\r",
									"\t\t\"videoSlug must be an alphanumeric string with \\\"-\\\" for spaces\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/video?videoSlug=",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"video"
							],
							"query": [
								{
									"key": "videoSlug",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid videoSlug",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Verify Status Code is 400', function() {\r",
									"\tpm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"var jsonData = pm.response.json(); \r",
									"\r",
									"pm.test(\"Verify Fields\", function () {\r",
									"\tconst schema = {\r",
									"\t\t\"type\": \"object\",\r",
									"  \t\t\t\"properties\": {\r",
									"    \t\t\t\"type\": { \"type\": \"string\" },\r",
									"\t\t\t\t\"message\": { \"type\": \"string\" }\r",
									"  \t\t\t},\r",
									"\t\t\t  \"required\": [ \"type\", \"message\" ]\r",
									"\t}\r",
									"\t\r",
									"\tpm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Error Type\", function () {\r",
									"\tpm.expect(jsonData.type).is.to.equal(\"InvalidSlug\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Error Message\", function () {\r",
									"\tpm.expect(jsonData.message).is.to.equal(\r",
									"\t\t\"videoSlug must be an alphanumeric string with \\\"-\\\" for spaces\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/video?videoSlug=(test)",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"video"
							],
							"query": [
								{
									"key": "videoSlug",
									"value": "(test)"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Valid videoSlug",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Verify Status Code is 200', function() {\r",
									"\tpm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test(\"Verify Fields\", function () {\r",
									"\tconst schema = {\r",
									"\t\t\"type\": \"object\",\r",
									"\t\t\"properties\": {\r",
									"\t\t\t\"name\": { \"type\": \"string\" },\r",
									"\t\t\t\"createdAt\": { \"type\": \"string\" },\r",
									"    \t\t\"updatedAt\": { \"type\": \"string\" },\r",
									"\t\t\t\"videoId\": { \"type\": \"string\" }, \r",
									"\t\t\t\"author\": { \"type\": \"string\" },\r",
									"\t\t\t\"description\": { \"type\": \"string\" },\r",
									"  \t\t},\r",
									"  \t\t\"required\": [\"name\", \"createdAt\", \"updatedAt\", \"videoId\", \"author\", \"description\"]\r",
									"\t}\r",
									"\r",
									"\tpm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Data\", function () {\r",
									"\tconst expected = {\r",
									"        \"createdAt\": \"2023-06-08T22:08:18.821Z\",\r",
									"        \"updatedAt\": \"2023-06-08T22:08:18.821Z\",\r",
									"        \"author\": \"William Ackman\",\r",
									"        \"description\": \"Bill Ackman is one of the top investors in the world, and he's said that he's aiming to have \\\"one of the greatest investment track records of all time.\\\"  As the CEO of Pershing Square Capital Management, the hedge fund he founded, he oversees $19 billion in assets.\\n\\nBut before he became one of the elite, he learned the basics of investing in his early 20s.\\n\\nThis Big Think video is aimed at young professionals just starting out, as well as those who are more experienced but lack a financial background.\\n\\nAckman takes viewers through the founding of a lemonade stand to teach the basics, explaining how investors pay for equity, a word interchangeable with \\\"stock.\\\" In the example, the owner starts with $750, with $250 of that coming from a loan. \",\r",
									"        \"videoId\": \"WEDIj9JBTC8\",\r",
									"        \"name\": \"Everything You Need to Know About Finance and Investing\"\r",
									"    }\r",
									"\r",
									"\tconst actual = pm.response.json();\r",
									"\r",
									"\tpm.expect(actual).to.be.eql(expected);\r",
									"\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/video?videoSlug=money-video",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"video"
							],
							"query": [
								{
									"key": "videoSlug",
									"value": "money-video"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Nonexistent Video",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Verify Status Code is 404', function() {\r",
									"\tpm.response.to.have.status(404);\r",
									"})\r",
									"\r",
									"var jsonData = pm.response.json(); \r",
									"\r",
									"pm.test(\"Verify Fields\", function () {\r",
									"\tconst schema = {\r",
									"\t\t\"type\": \"object\",\r",
									"  \t\t\t\"properties\": {\r",
									"    \t\t\t\"type\": { \"type\": \"string\" },\r",
									"\t\t\t\t\"message\": { \"type\": \"string\" }\r",
									"  \t\t\t},\r",
									"\t\t\t  \"required\": [ \"type\", \"message\" ]\r",
									"\t}\r",
									"\t\r",
									"\tpm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Error Type\", function () {\r",
									"\tpm.expect(jsonData.type).is.to.equal(\"VideoDoesNotExist\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Error Message\", function () {\r",
									"\tpm.expect(jsonData.message).is.to.equal(\r",
									"\t\t\"Failed to find Video with slug: test-0001\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/video?videoSlug=test-0001",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"video"
							],
							"query": [
								{
									"key": "videoSlug",
									"value": "test-0001"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Search Results",
			"item": [
				{
					"name": "Missing Query Param",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Verify Status Code is 400', function() {\r",
									"\tpm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"var jsonData = pm.response.json(); \r",
									"\r",
									"pm.test(\"Verify Fields\", function () {\r",
									"\tconst schema = {\r",
									"\t\t\"type\": \"object\",\r",
									"  \t\t\t\"properties\": {\r",
									"    \t\t\t\"type\": { \"type\": \"string\" },\r",
									"\t\t\t\t\"message\": { \"type\": \"string\" }\r",
									"  \t\t\t},\r",
									"\t\t\t  \"required\": [ \"type\", \"message\" ]\r",
									"\t}\r",
									"\t\r",
									"\tpm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Error Type\", function () {\r",
									"\tpm.expect(jsonData.type).is.to.equal(\"MissingQueryParams\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Error Message\", function () {\r",
									"\tpm.expect(jsonData.message).is.to.equal(\r",
									"\t\t\"The request params requires searchText\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/search",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"search"
							]
						}
					},
					"response": []
				},
				{
					"name": "Blank searchText",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Verify Status Code is 400', function() {\r",
									"\tpm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"var jsonData = pm.response.json(); \r",
									"\r",
									"pm.test(\"Verify Fields\", function () {\r",
									"\tconst schema = {\r",
									"\t\t\"type\": \"object\",\r",
									"  \t\t\t\"properties\": {\r",
									"    \t\t\t\"type\": { \"type\": \"string\" },\r",
									"\t\t\t\t\"message\": { \"type\": \"string\" }\r",
									"  \t\t\t},\r",
									"\t\t\t  \"required\": [ \"type\", \"message\" ]\r",
									"\t}\r",
									"\t\r",
									"\tpm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Error Type\", function () {\r",
									"\tpm.expect(jsonData.type).is.to.equal(\"MissingSlug\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Error Message\", function () {\r",
									"\tpm.expect(jsonData.message).is.to.equal(\r",
									"\t\t\"searchText must be an alphanumeric string\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/search?searchText=",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"search"
							],
							"query": [
								{
									"key": "searchText",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid searchText",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Verify Status Code is 400', function() {\r",
									"\tpm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"var jsonData = pm.response.json(); \r",
									"\r",
									"pm.test(\"Verify Fields\", function () {\r",
									"\tconst schema = {\r",
									"\t\t\"type\": \"object\",\r",
									"  \t\t\t\"properties\": {\r",
									"    \t\t\t\"type\": { \"type\": \"string\" },\r",
									"\t\t\t\t\"message\": { \"type\": \"string\" }\r",
									"  \t\t\t},\r",
									"\t\t\t  \"required\": [ \"type\", \"message\" ]\r",
									"\t}\r",
									"\t\r",
									"\tpm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Error Type\", function () {\r",
									"\tpm.expect(jsonData.type).is.to.equal(\"InvalidSlug\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Error Message\", function () {\r",
									"\tpm.expect(jsonData.message).is.to.equal(\r",
									"\t\t\"searchText must be an alphanumeric string\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/search?searchText=@test",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"search"
							],
							"query": [
								{
									"key": "searchText",
									"value": "@test"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Valid searchText",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Verify Status Code is 200', function() {\r",
									"\tpm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test(\"Verify Fields\", function () {\r",
									"\tconst schema = {\r",
									"\t\t\"type\": \"array\",\r",
									"\t\t\"items\": [\r",
									"\t\t\t{\r",
									"\t\t\t\t\"type\": \"object\",\r",
									"\t\t\t\t\"properties\": {\r",
									"\t\t\t\t\t\"name\": { \r",
									"\t\t\t\t\t\t\"type\": \"string\" \r",
									"\t\t\t\t\t},\r",
									"\t\t\t\t\t\"slug\": { \r",
									"\t\t\t\t\t\t\"type\": \"string\",\r",
									"\t\t\t\t\t\t\"pattern\": \"^[a-z0-9-]+$\"\r",
									"\t\t\t\t\t},\r",
									"\t\t\t\t\t\"icon\": { \r",
									"\t\t\t\t\t\t\"type\": \"string\"\r",
									"\t\t\t\t\t}\r",
									"\t\t\t\t},\r",
									"\t\t\t\t\"required\": [ \"name\", \"slug\", \"icon\"]\r",
									"\t\t\t}\r",
									"\t\t],\t\t\r",
									"\t}\r",
									"\r",
									"\tpm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Data\", function () {\r",
									"\tconst expected = [\r",
									"\t\t{\r",
									"\t\t\t\"name\": \"Finance 101\",\r",
									"\t\t\t\"slug\": \"finance-101\",\r",
									"\t\t\t\"icon\": \"https://cdn-icons-png.flaticon.com/512/4305/4305512.png\",\r",
									"\t\t},\r",
									"\t\t{\r",
									"\t\t\t\"name\": \"Money 101\",\r",
									"\t\t\t\"slug\": \"money-101\",\r",
									"\t\t\t\"icon\": \"https://cdn-icons-png.flaticon.com/512/4305/4305512.png\",\r",
									"\t\t}\r",
									"\t]\r",
									"\tconst actual = pm.response.json();\r",
									"\r",
									"\tpm.expect(actual).to.be.eql(expected);\r",
									"\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/search?searchText=fin",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"search"
							],
							"query": [
								{
									"key": "searchText",
									"value": "fin"
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "Need to Update the Validate searchText for New Mock Data"
		},
		{
			"name": "Autocomplete",
			"item": [
				{
					"name": "Missing Query Param",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Verify Status Code is 400', function() {\r",
									"\tpm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"var jsonData = pm.response.json(); \r",
									"\r",
									"pm.test(\"Verify Fields\", function () {\r",
									"\tconst schema = {\r",
									"\t\t\"type\": \"object\",\r",
									"  \t\t\t\"properties\": {\r",
									"    \t\t\t\"type\": { \"type\": \"string\" },\r",
									"\t\t\t\t\"message\": { \"type\": \"string\" }\r",
									"  \t\t\t},\r",
									"\t\t\t  \"required\": [ \"type\", \"message\" ]\r",
									"\t}\r",
									"\t\r",
									"\tpm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Error Type\", function () {\r",
									"\tpm.expect(jsonData.type).is.to.equal(\"MissingQueryParams\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Error Message\", function () {\r",
									"\tpm.expect(jsonData.message).is.to.equal(\r",
									"\t\t\"The request params requires searchText\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/searchAutoComplete",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"searchAutoComplete"
							]
						}
					},
					"response": []
				},
				{
					"name": "Blank searchText",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Verify Status Code is 400', function() {\r",
									"\tpm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"var jsonData = pm.response.json(); \r",
									"\r",
									"pm.test(\"Verify Fields\", function () {\r",
									"\tconst schema = {\r",
									"\t\t\"type\": \"object\",\r",
									"  \t\t\t\"properties\": {\r",
									"    \t\t\t\"type\": { \"type\": \"string\" },\r",
									"\t\t\t\t\"message\": { \"type\": \"string\" }\r",
									"  \t\t\t},\r",
									"\t\t\t  \"required\": [ \"type\", \"message\" ]\r",
									"\t}\r",
									"\t\r",
									"\tpm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Error Type\", function () {\r",
									"\tpm.expect(jsonData.type).is.to.equal(\"MissingSlug\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Error Message\", function () {\r",
									"\tpm.expect(jsonData.message).is.to.equal(\r",
									"\t\t\"searchText must be an alphanumeric string\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/searchAutoComplete?searchText=",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"searchAutoComplete"
							],
							"query": [
								{
									"key": "searchText",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid searchText",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Verify Status Code is 400', function() {\r",
									"\tpm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"var jsonData = pm.response.json(); \r",
									"\r",
									"pm.test(\"Verify Fields\", function () {\r",
									"\tconst schema = {\r",
									"\t\t\"type\": \"object\",\r",
									"  \t\t\t\"properties\": {\r",
									"    \t\t\t\"type\": { \"type\": \"string\" },\r",
									"\t\t\t\t\"message\": { \"type\": \"string\" }\r",
									"  \t\t\t},\r",
									"\t\t\t  \"required\": [ \"type\", \"message\" ]\r",
									"\t}\r",
									"\t\r",
									"\tpm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Error Type\", function () {\r",
									"\tpm.expect(jsonData.type).is.to.equal(\"InvalidSlug\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Error Message\", function () {\r",
									"\tpm.expect(jsonData.message).is.to.equal(\r",
									"\t\t\"searchText must be an alphanumeric string\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/searchAutoComplete?searchText=(test)",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"searchAutoComplete"
							],
							"query": [
								{
									"key": "searchText",
									"value": "(test)"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Valid searchText - Course",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Verify Status Code is 200', function() {\r",
									"\tpm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test(\"Verify Fields\", function () {\r",
									"\tconst schema = {\r",
									"\t\t\"type\": \"array\",\r",
									"\t\t\"items\": [{\r",
									"\t\t\t\"type\": \"object\",\r",
									"\t\t\t\"properties\": {\r",
									"\t\t\t\t\"name\": { \"type\": \"string\" },\r",
									"\t\t\t\t\"source\": { \r",
									"\t\t\t\t\t\"type\": \"string\",\r",
									"\t\t\t\t\t\"pattern\": \"course|unit\"\r",
									"\t\t\t\t},\r",
									"\t\t\t\t\"href\": { \"type\": \"string\" }\r",
									"\t\t\t},\r",
									"\t\t\t\"required\": [ \"name\", \"source\", \"href\" ]\r",
									"\t\t\t}]\r",
									"\t}\r",
									"\r",
									"\tpm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Data\", function () {\r",
									"\tconst expected = [\r",
									"\t\t{\r",
									"\t\t\t\"name\": \"Finance 101\",\r",
									"\t\t\t\"source\": \"course\",\r",
									"\t\t\t\"href\": \"/learning/finance-101\"\r",
									"\t\t}\r",
									"\t]\r",
									"\tconst actual = pm.response.json();\r",
									"\r",
									"\tpm.expect(actual).to.be.eql(expected);\r",
									"\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/searchAutoComplete?searchText=fin",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"searchAutoComplete"
							],
							"query": [
								{
									"key": "searchText",
									"value": "fin"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Valid searchText - Unit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Verify Status Code is 200', function() {\r",
									"\tpm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test(\"Verify Fields\", function () {\r",
									"\tconst schema = {\r",
									"\t\t\"type\": \"array\",\r",
									"\t\t\"items\": [{\r",
									"\t\t\t\"type\": \"object\",\r",
									"\t\t\t\"properties\": {\r",
									"\t\t\t\t\"name\": { \"type\": \"string\" },\r",
									"\t\t\t\t\"source\": { \r",
									"\t\t\t\t\t\"type\": \"string\",\r",
									"\t\t\t\t\t\"pattern\": \"course|unit\"\r",
									"\t\t\t\t},\r",
									"\t\t\t\t\"href\": { \"type\": \"string\" }\r",
									"\t\t\t},\r",
									"\t\t\t\"required\": [ \"name\", \"source\", \"href\" ]\r",
									"\t\t\t}]\r",
									"\t}\r",
									"\r",
									"\tpm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Data\", function () {\r",
									"\tconst expected = [\r",
									"\t\t{\r",
									"\t\t\t\"name\": \"Blue chip Stocks\",\r",
									"\t\t\t\"source\": \"unit\",\r",
									"\t\t\t\"href\": \"/learning/money-101/unit/blue-chip-stocks\"\r",
									"\t\t}\r",
									"\t]\r",
									"\tconst actual = pm.response.json();\r",
									"\r",
									"\tpm.expect(actual).to.be.eql(expected);\r",
									"\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/searchAutoComplete?searchText=blue",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"searchAutoComplete"
							],
							"query": [
								{
									"key": "searchText",
									"value": "blue"
								},
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "Need to update Valid searchText - Course & Valid searchText - Unit for New Mock Data"
		},
		{
			"name": "Learning Progress",
			"item": [
				{
					"name": "Missing Query Param",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Verify Status Code is 400', function() {\r",
									"\tpm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"var jsonData = pm.response.json(); \r",
									"\r",
									"pm.test(\"Verify Fields\", function () {\r",
									"\tconst schema = {\r",
									"\t\t\"type\": \"object\",\r",
									"  \t\t\t\"properties\": {\r",
									"    \t\t\t\"type\": { \"type\": \"string\" },\r",
									"\t\t\t\t\"message\": { \"type\": \"string\" }\r",
									"  \t\t\t},\r",
									"\t\t\t  \"required\": [ \"type\", \"message\" ]\r",
									"\t}\r",
									"\t\r",
									"\tpm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Error Type\", function () {\r",
									"\tpm.expect(jsonData.type).is.to.equal(\"MissingQueryParams\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Error Message\", function () {\r",
									"\tpm.expect(jsonData.message).is.to.equal(\r",
									"\t\t\"The request params requires userID=\\\"user_ + alphanumeric\\\"\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/learningProgress",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"learningProgress"
							]
						}
					},
					"response": []
				},
				{
					"name": "Blank userID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Verify Status Code is 400', function() {\r",
									"\tpm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"var jsonData = pm.response.json(); \r",
									"\r",
									"pm.test(\"Verify Fields\", function () {\r",
									"\tconst schema = {\r",
									"\t\t\"type\": \"object\",\r",
									"  \t\t\t\"properties\": {\r",
									"    \t\t\t\"type\": { \"type\": \"string\" },\r",
									"\t\t\t\t\"message\": { \"type\": \"string\" }\r",
									"  \t\t\t},\r",
									"\t\t\t  \"required\": [ \"type\", \"message\" ]\r",
									"\t}\r",
									"\t\r",
									"\tpm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Error type\", function () {\r",
									"\tpm.expect(jsonData.type).is.to.equal(\"MissingUserID\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Error Message\", function () {\r",
									"\tpm.expect(jsonData.message).is.to.equal(\r",
									"\t\t\"userID must be \\\"user_ + alphanumeric\\\"\")\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/learningProgress?userID",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"learningProgress"
							],
							"query": [
								{
									"key": "userID",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid userID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Verify Status Code is 400', function() {\r",
									"\tpm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"var jsonData = pm.response.json(); \r",
									"\r",
									"pm.test(\"Verify Fields\", function () {\r",
									"\tconst schema = {\r",
									"\t\t\"type\": \"object\",\r",
									"  \t\t\t\"properties\": {\r",
									"    \t\t\t\"type\": { \"type\": \"string\" },\r",
									"\t\t\t\t\"message\": { \"type\": \"string\" }\r",
									"  \t\t\t},\r",
									"\t\t\t  \"required\": [ \"type\", \"message\" ]\r",
									"\t}\r",
									"\t\r",
									"\tpm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Error Type\", function () {\r",
									"\tpm.expect(jsonData.type).is.to.equal(\"InvalidUserID\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Error Message\", function () {\r",
									"\tpm.expect(jsonData.message).is.to.equal(\r",
									"\t\t\"userID must be \\\"user_ + alphanumeric\\\"\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/learningProgress?userID=test-0001",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"learningProgress"
							],
							"query": [
								{
									"key": "userID",
									"value": "test-0001"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Nonexistent User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Verify Status Code is 400', function() {\r",
									"\tpm.response.to.have.status(404);\r",
									"})\r",
									"\r",
									"var jsonData = pm.response.json(); \r",
									"\r",
									"pm.test(\"Verify Fields\", function () {\r",
									"\tconst schema = {\r",
									"\t\t\"type\": \"object\",\r",
									"  \t\t\t\"properties\": {\r",
									"    \t\t\t\"type\": { \"type\": \"string\" },\r",
									"\t\t\t\t\"message\": { \"type\": \"string\" }\r",
									"  \t\t\t},\r",
									"\t\t\t  \"required\": [ \"type\", \"message\" ]\r",
									"\t}\r",
									"\t\r",
									"\tpm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Error Type\", function () {\r",
									"\tpm.expect(jsonData.type).is.to.equal(\"UserDoesNotExist\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Error Message\", function () {\r",
									"\tpm.expect(jsonData.message).is.to.equal(\r",
									"\t\t\"User with ID: user_test0001 does not exist\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/learningProgress?userID=user_test0001",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"learningProgress"
							],
							"query": [
								{
									"key": "userID",
									"value": "user_test0001"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Nonexistent Learning Progress",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Verify Status Code is 404', function() {\r",
									"\tpm.response.to.have.status(404);\r",
									"})\r",
									"\r",
									"var jsonData = pm.response.json(); \r",
									"\r",
									"pm.test(\"Verify Fields\", function () {\r",
									"\tconst schema = {\r",
									"\t\t\"type\": \"object\",\r",
									"  \t\t\t\"properties\": {\r",
									"    \t\t\t\"type\": { \"type\": \"string\" },\r",
									"\t\t\t\t\"message\": { \"type\": \"string\" }\r",
									"  \t\t\t},\r",
									"\t\t\t  \"required\": [ \"type\", \"message\" ]\r",
									"\t}\r",
									"\t\r",
									"\tpm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Error Type\", function () {\r",
									"\tpm.expect(jsonData.type).is.to.equal(\"UserProgressDoesNotExist\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Error Message\", function () {\r",
									"\tpm.expect(jsonData.message).is.to.equal(\r",
									"\t\t\"No Learning Progress found for User with ID: user_2R9mRk6EfnUJ9qFyPCnvsJX2U71\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/learningProgress?userID=user_2R9mRk6EfnUJ9qFyPCnvsJX2U71",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"learningProgress"
							],
							"query": [
								{
									"key": "userID",
									"value": "user_2R9mRk6EfnUJ9qFyPCnvsJX2U71"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Existent Learning Progress",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Verify Status Code is 400', function() {\r",
									"\tpm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"var jsonData = pm.response.json(); \r",
									"\r",
									"pm.test(\"Verify Fields\", function () {\r",
									"\tconst schema = {\r",
									"\t\t\"type\": \"object\",\r",
									"\t\t\"properties\": {\r",
									"\t\t\t\"courses\": {\r",
									"\t\t\t\t\"type\": \"array\",\r",
									"\t\t\t\t\"items\": [{\r",
									"\t\t\t\t\t\"type\": \"object\",\r",
									"\t\t\t\t\t\"properties\": {\r",
									"\t\t\t\t\t\t\"courseID\": {\r",
									"\t\t\t\t\t\t\t\"type\": \"object\",\r",
									"\t\t\t\t\t\t\t\"properties\": {\r",
									"\t\t\t\t\t\t\t\t\"name\": { \"type\": \"string\" },\r",
									"\t\t\t\t\t\t\t\t\"slug\": { \"type\": \"string\" },\r",
									"\t\t\t\t\t\t\t\t\"icon\": { \"type\": \"string\" },\r",
									"\t\t\t\t\t\t\t\t\"units\": {\r",
									"\t\t\t\t\t\t\t\t\t\"type\": \"array\",\r",
									"\t\t\t\t\t\t\t\t\t\"items\": [{ \"type\": \"string\" }]\r",
									"\t\t\t\t\t\t\t\t}\r",
									"\t\t\t\t\t\t\t},\r",
									"\t\t\t\t\t\t\t\"required\": [ \"name\", \"slug\", \"icon\",\"units\" ]\r",
									"\t\t\t\t\t\t},\r",
									"\t\t\t\t\t\t\"progress\": { \"type\": \"integer\" }\r",
									"\t\t\t\t\t},\r",
									"\t\t\t\t\t\"required\": [ \"courseID\", \"progress\" ]\r",
									"\t\t\t\t}]\r",
									"\t\t\t},\r",
									"\t\t\t\"units\": {\r",
									"\t\t\t\t\"type\": \"array\",\r",
									"\t\t\t\t\"items\": [{\r",
									"\t\t\t\t\t\"type\": \"object\",\r",
									"\t\t\t\t\t\"properties\": {\r",
									"\t\t\t\t\t\t\"unitID\": {\r",
									"\t\t\t\t\t\t\t\"type\": \"object\",\r",
									"\t\t\t\t\t\t\t\"properties\": {\r",
									"\t\t\t\t\t\t\t\t\"name\": { \"type\": \"string\" },\r",
									"\t\t\t\t\t\t\t\t\"slug\": { \"type\": \"string\" },\r",
									"\t\t\t\t\t\t\t\t\"createdAt\": { \"type\": \"string\" },\r",
									"\t\t\t\t\t\t\t\t\"updatedAt\": { \"type\": \"string\" },\r",
									"\t\t\t\t\t\t\t\t\"content\": { \r",
									"\t\t\t\t\t\t\t\t\t\"type\": \"array\",\r",
									"\t\t\t\t\t\t\t\t\t\"items\": [{ \"type\": \"string\" }],\r",
									"\t\t\t\t\t\t\t\t}\r",
									"\t\t\t\t\t\t\t},\r",
									"\t\t\t\t\t\t\t\"required\": [ \"name\", \"slug\", \"createdAt\", \"updatedAt\", \"content\" ]\r",
									"\t\t\t\t\t\t}\r",
									"\t\t\t\t\t},\r",
									"\t\t\t\t\t\"progress\": { \"type\": \"integer\" },\r",
									"\t\t\t\t\t\"required\": [ \"unitID\", \"progress\" ]\r",
									"\t\t\t\t}]\r",
									"\t\t\t},\r",
									"\t\t},\r",
									"\t\t\"required\": [ \"courses\", \"units\" ]\r",
									"\t}\r",
									"\r",
									"\tpm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Data\", function () {\r",
									"\tconst expected = {\r",
									"        \"courses\": [\r",
									"            {\r",
									"                \"courseID\": {\r",
									"                    \"name\": \"Money 101\",\r",
									"                    \"slug\": \"money-101\",\r",
									"                    \"icon\": \"https://cdn-icons-png.flaticon.com/512/4305/4305512.png\",\r",
									"                    \"units\": [\r",
									"                        \"648251863fd1687e8aa34db1\"\r",
									"                    ]\r",
									"                },\r",
									"                \"progress\": 2,\r",
									"                \"_id\": \"64c2efcdecc930964a3b3ca9\"\r",
									"            }\r",
									"        ],\r",
									"        \"units\": [\r",
									"            {\r",
									"                \"unitID\": {\r",
									"                    \"name\": \"Blue chip Stocks\",\r",
									"                    \"slug\": \"blue-chip-stocks\",\r",
									"                    \"createdAt\": \"2023-06-08T22:08:18.823Z\",\r",
									"                    \"updatedAt\": \"2023-06-08T22:08:18.823Z\",\r",
									"                    \"content\": [\r",
									"                        \"648251863fd1687e8aa34dad\",\r",
									"                        \"648251863fd1687e8aa34daf\",\r",
									"                        \"64b9511ecee0cd1028b6d2ab\"\r",
									"                    ]\r",
									"                },\r",
									"                \"progress\": 2,\r",
									"                \"_id\": \"64c2efcdecc930964a3b3caa\"\r",
									"            }\r",
									"        ]\r",
									"    }\r",
									"    \r",
									"\tconst actual = pm.response.json();\r",
									"\r",
									"\tpm.expect(actual).to.be.eql(expected);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/learningProgress?userID={{USER_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"learningProgress"
							],
							"query": [
								{
									"key": "userID",
									"value": "{{USER_ID}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Unit Progress",
			"item": [
				{
					"name": "Missing Query Param",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Verify Status Code is 400', function() {\r",
									"\tpm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"var jsonData = pm.response.json(); \r",
									"\r",
									"pm.test(\"Verify Fields\", function () {\r",
									"\tconst schema = {\r",
									"\t\t\"type\": \"object\",\r",
									"  \t\t\t\"properties\": {\r",
									"    \t\t\t\"type\": { \"type\": \"string\" },\r",
									"\t\t\t\t\"message\": { \"type\": \"string\" }\r",
									"  \t\t\t},\r",
									"\t\t\t  \"required\": [ \"type\", \"message\" ]\r",
									"\t}\r",
									"\t\r",
									"\tpm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Error Type\", function () {\r",
									"\tpm.expect(jsonData.type).is.to.equal(\"MissingQueryParams\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Error Message\", function () {\r",
									"\tpm.expect(jsonData.message).is.to.equal(\r",
									"\t\t\"The request params requires userID=\\\"user_ + alphanumeric\\\"\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/unitsProgress",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"unitsProgress"
							]
						}
					},
					"response": []
				},
				{
					"name": "Blank userID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Verify Status Code is 400', function() {\r",
									"\tpm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"var jsonData = pm.response.json(); \r",
									"\r",
									"pm.test(\"Verify Fields\", function () {\r",
									"\tconst schema = {\r",
									"\t\t\"type\": \"object\",\r",
									"  \t\t\t\"properties\": {\r",
									"    \t\t\t\"type\": { \"type\": \"string\" },\r",
									"\t\t\t\t\"message\": { \"type\": \"string\" }\r",
									"  \t\t\t},\r",
									"\t\t\t  \"required\": [ \"type\", \"message\" ]\r",
									"\t}\r",
									"\t\r",
									"\tpm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Error type\", function () {\r",
									"\tpm.expect(jsonData.type).is.to.equal(\"MissingUserID\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Error Message\", function () {\r",
									"\tpm.expect(jsonData.message).is.to.equal(\r",
									"\t\t\"userID must be \\\"user_ + alphanumeric\\\"\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/unitsProgress?userID",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"unitsProgress"
							],
							"query": [
								{
									"key": "userID",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid userID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Verify Status Code is 400', function() {\r",
									"\tpm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"var jsonData = pm.response.json(); \r",
									"\r",
									"pm.test(\"Verify Fields\", function () {\r",
									"\tconst schema = {\r",
									"\t\t\"type\": \"object\",\r",
									"  \t\t\t\"properties\": {\r",
									"    \t\t\t\"type\": { \"type\": \"string\" },\r",
									"\t\t\t\t\"message\": { \"type\": \"string\" }\r",
									"  \t\t\t},\r",
									"\t\t\t  \"required\": [ \"type\", \"message\" ]\r",
									"\t}\r",
									"\t\r",
									"\tpm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Error Type\", function () {\r",
									"\tpm.expect(jsonData.type).is.to.equal(\"InvalidUserID\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Error Message\", function () {\r",
									"\tpm.expect(jsonData.message).is.to.equal(\r",
									"\t\t\"userID must be \\\"user_ + alphanumeric\\\"\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/unitsProgress?userID=test-0001",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"unitsProgress"
							],
							"query": [
								{
									"key": "userID",
									"value": "test-0001"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Nonexistent User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Verify Status Code is 400', function() {\r",
									"\tpm.response.to.have.status(404);\r",
									"})\r",
									"\r",
									"var jsonData = pm.response.json(); \r",
									"\r",
									"pm.test(\"Verify Fields\", function () {\r",
									"\tconst schema = {\r",
									"\t\t\"type\": \"object\",\r",
									"  \t\t\t\"properties\": {\r",
									"    \t\t\t\"type\": { \"type\": \"string\" },\r",
									"\t\t\t\t\"message\": { \"type\": \"string\" }\r",
									"  \t\t\t},\r",
									"\t\t\t  \"required\": [ \"type\", \"message\" ]\r",
									"\t}\r",
									"\t\r",
									"\tpm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Error Type\", function () {\r",
									"\tpm.expect(jsonData.type).is.to.equal(\"UserDoesNotExist\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Error Message\", function () {\r",
									"\tpm.expect(jsonData.message).is.to.equal(\r",
									"\t\t\"User with ID: user_test0001 does not exist\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/unitsProgress?userID=user_test0001",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"unitsProgress"
							],
							"query": [
								{
									"key": "userID",
									"value": "user_test0001"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Nonexistent Unit Progress",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Verify Status Code is 404', function() {\r",
									"\tpm.response.to.have.status(404);\r",
									"})\r",
									"\r",
									"var jsonData = pm.response.json(); \r",
									"\r",
									"pm.test(\"Verify Fields\", function () {\r",
									"\tconst schema = {\r",
									"\t\t\"type\": \"object\",\r",
									"  \t\t\t\"properties\": {\r",
									"    \t\t\t\"type\": { \"type\": \"string\" },\r",
									"\t\t\t\t\"message\": { \"type\": \"string\" }\r",
									"  \t\t\t},\r",
									"\t\t\t  \"required\": [ \"type\", \"message\" ]\r",
									"\t}\r",
									"\t\r",
									"\tpm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Error Type\", function () {\r",
									"\tpm.expect(jsonData.type).is.to.equal(\"UserProgressDoesNotExist\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Error Message\", function () {\r",
									"\tpm.expect(jsonData.message).is.to.equal(\r",
									"\t\t\"No Unit Progress found for User with ID: user_2R9mRk6EfnUJ9qFyPCnvsJX2U71\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/unitsProgress?userID=user_2R9mRk6EfnUJ9qFyPCnvsJX2U71",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"unitsProgress"
							],
							"query": [
								{
									"key": "userID",
									"value": "user_2R9mRk6EfnUJ9qFyPCnvsJX2U71"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Existent Unit Progress",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Verify Status Code is 400', function() {\r",
									"\tpm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"var jsonData = pm.response.json(); \r",
									"\r",
									"pm.test(\"Verify Fields\", function () {\r",
									"\tconst schema = {\r",
									"\t\"type\": \"array\",\r",
									"\t\"items\": [{\r",
									"\t\t\t\"type\": \"object\",\r",
									"\t\t\t\"properties\": {\r",
									"\t\t\t\t\"slug\": { \"type\": \"string\" },\r",
									"\t\t\t\t\"progress\": { \"type\": \"integer\" }\r",
									"\t\t\t},\r",
									"\t\t\t\"required\": [ \"slug\", \"progress\" ]\r",
									"\t\t}]\r",
									"\t}\r",
									"\r",
									"\tpm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Data\", function () {\r",
									"\tconst expected = [\r",
									"        {\r",
									"            \"slug\": \"blue-chip-stocks\",\r",
									"            \"progress\": 2\r",
									"        }\r",
									"    ]\r",
									"\r",
									"\tconst actual = pm.response.json();\r",
									"\r",
									"\tpm.expect(actual).to.be.eql(expected);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/unitsProgress?userID={{USER_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"unitsProgress"
							],
							"query": [
								{
									"key": "userID",
									"value": "{{USER_ID}}"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	]
}